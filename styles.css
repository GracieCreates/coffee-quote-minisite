@import url('https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Poppins:wght@200;300;400;500;600;700;800;900&display=swap');

/* Flexbox Tutorial: contrl the way items are spaced out and algined within a containter */

/* To use it, give an element a display property of flex. This will make the element a flex container. Any direct children of a flex container are called flex items. */

* /* Normalize your box model by creating a * selector */
{
    box-sizing: border-box;
}

body
{
    margin: 0;  /* remove margin from body element */
    font-family: Poppins, sans-serif;
    /* background-color: #D5EAEA; */
    /* background-color: rgb(255, 242, 242); */
    background-color: #f5f6f7;
}


/* Dark Mode*/

button.dark-mode-toggle {
    /* background-color: #4b4744; */
    background: #524941;
    color: #fff;/* removes the black outline as well*/
    border-radius: 50px;
    cursor: pointer; 
    border: none;
    padding: 15px 30px; /* determines the size of the button */
    font-size: 20px;
    font-weight: 800;
}

button.dark-mode-toggle:hover
{
    color: #DD142E;
}

body.dark-mode button
{
    background: #fff;
    color: #885645;
}

body.dark-mode p {
  color: #f8ece3;
}

body.dark-mode {
    background-color: #635d5b;
    color: rgb(255, 242, 242);
 }


header.dark-mode {
    background-color: #635d5b;
    color: rgb(255, 242, 242);
    border-bottom: 20px solid #635d5b; 
  }

footer.dark-mode {
    background-color: #635d5b;
    color: rgb(255, 242, 242);
  }



 /* Gallery */   
  
.gallery img
{
    width: 100%;
    max-width: 350px;
    height: 320px;
}

/*   Header  */
header
{
    text-align: center;
    font-family: Abril Fatface;
    font-size: 40px;
    letter-spacing: 4px;
    /* text-transform: uppercase; */
    /* margin: 0; */
    padding:32px ; /* padding all side */
    /* background: rgb(255, 242, 242); */
    color: #DD142E;
    border-bottom: 20px solid #f5f6f7; 
}

h1{
    padding-bottom: -30px; /*space between Header and Tagline*/
    margin: 10px; /*space between Header and Tagline*/
}
p{
    margin: 0; /*remove all margins*/
    font-family: "Open Sans", sans-serif;
    font-size: 18px;
    font-weight: 600;
    color: #524941;
    
}


/* Flexbox has a main and cross axis. The main axis is defined by the flex-direction property, which has four possible values: 
row (default): horizontal axis with flex items from left to right
row-reverse: horizontal axis with flex items from right to left
column: vertical axis with flex items from top to bottom
column-reverse: vertical axis with flex items from bottom to top

Note: The axes and directions will be different depending on the text direction. The values shown are for a left-to-right text direction.*/

/* Flex-wrap: property determines how your flex items behave when the flex container is too small 
Setting it to wrap will allow the items to wrap to the next row or column. nowrap (default) will prevent your items from wrapping and shrink them if needed.*/

/* The justify-content property determines how the items inside a flex container are positioned along the main axis, affecting their position and the space around them..*/

/* The align-items property positions the flex content along the cross axis. In this case, with your flex-direction set to row, your cross axis would be vertical. */

.gallery
{
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    justify-content: center;
    align-items: center; /*To vertically center your images, this selector correspond to the flex-direction selector*/
    padding: 20px 10;/*create some space around the container..*/
    max-width: 1100px;
    margin: 0 auto; /*Then, give it a max-width of 1400px and add a margin of 0 auto to center it.*/

    

    object-fit: cover; /*this will tell the imaged (in case some images are distorted because of the different aspect ratios) to fill the img container while maintaining aspect ratio, resulting in cropping to fit*/
    gap: 20px; /*gap property, row-gap, column-gap gives gaps for flex, grid and multi-column oayout. Apply this property to the container element*/
    border-radius: 30px;
}
    /*The ::after pseudo-element creates an element that is the last child of the selected element. You can use it to add an empty element after the last image. If you give it the same width as the images it will push the last image to the left when the gallery is in a two-column layout. Right now, it is in the center because you set justify-content: center on the flex container.*/

.gallery::after  
  {
    content: "";
    width: 350px;
  }

/*gallery row*/
.gallery-row {
    display: flex;
    justify-content: space-between;
    width: 100%;
    /* max-width: 1400px;  */
  }

/*gallery-link*/
.gallery-link {
    display: inline-block;
}

.gallery-link:hover {
    opacity: 1;
}


.gallery-img {
    width: calc(33.33% - 10px);
    margin-bottom: 10px;
  }

.gallery-link:hover .gallery-img {
    transform: scale(2.2);
}

a {
    text-decoration: none;
}

/*gallery-link*/

.modal {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.8);
    display: flex;
    align-items: center;
    justify-content: center;
   
}


.modal img {
    max-width: 90%;
    max-height: 90%;
}



/*   Footer   */
footer
{
    text-align: center;
    font-family: Poppins, san-serif;
    font-weight: 200;
    letter-spacing: 4px;
    color: #DD142E;
    padding: 32px; /*padding all side*/
    background: rgb(255, 242, 242);
    border-bottom: 40px solid rgb(255, 242, 242);
}


h4
{
    text-align: center;
}

.footer-highlight
{
    /* background: #d42f12; */
    padding: 5px;
    /* border-radius: 10px; */
    font-size: 20px;
}
